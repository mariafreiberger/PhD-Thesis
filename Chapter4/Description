Chapter4

In this folder are available all the files needed, for each protein, to run the simulations using the AWSEM package

For Umbrellas samplign simulations you has to change the forces_setup.py file, here is an example for the protein 1nfi:
in the following line the value of Q (here is in 0) and the value of the harmonic constant (k_qbias) are configured: qbias_term(oa,0, '1nfi-openmmawsem.pdb', 'A', k_qbias=1500*kilocalorie_per_mole, qbias_min_seq_sep=3, qbias_max_seq_sep=np.inf, qbias_contact_threshold=0.8*nanometers, forceGroup=4),
in the following line the value of the fragment size (max_seq_sep) is configure: fragment_memory_term(oa, max_seq_sep=12, frag_file_list_file="./single_frags.mem", npy_frag_table="./single_frags.npy", UseSavedFragFragTable=False)

import os
import sys
from simtk.unit import angstrom
from simtk.unit import kilocalorie_per_mole

try:
    OPENAWSEM_LOCATION = os.environ["OPENAWSEM_LOCATION"]
    sys.path.append(OPENAWSEM_LOCATION)
    # print(OPENAWSEM_LOCATION)
except KeyError:
    print("Please set the environment variable name OPENAWSEM_LOCATION.\n Example: export OPENAWSEM_LOCATION='YOUR_OPENAWSEM_LOCATION'")
    exit()

from openmmawsem import *
from helperFunctions.myFunctions import *
def qbias_term(oa, q0, reference_pdb_file, reference_chain_name, k_qbias=100*kilocalorie_per_mole, qbias_min_seq_sep=3, qbias_max_seq_sep=np>
    k_qbias = k_qbias.value_in_unit(kilojoule_per_mole)   # convert to kilojoule_per_mole, openMM default uses kilojoule_per_mole as energy.
    qbias = CustomCVForce(f"0.5*{k_qbias}*(q-{q0})^2")
    q = q_value(oa, reference_pdb_file, reference_chain_name, min_seq_sep=qbias_min_seq_sep, max_seq_sep=qbias_max_seq_sep, contact_threshold>
    qbias.addCollectiveVariable("q", q)
    # qbias.addGlobalParameter("k_qbias", k_qbias)
    # qbias.addGlobalParameter("q0", q0)
    qbias.setForceGroup(forceGroup)
    return qbias


def set_up_forces(oa, computeQ=False, submode=-1, contactParameterLocation=".", membrane_center=-0*angstrom):
    # apply forces
    forces = [
        con_term(oa),
        chain_term(oa),
        chi_term(oa),
        excl_term(oa, periodic=False),
        rama_term(oa),
        rama_proline_term(oa),
        #rama_ssweight_term(oa, k_rama_ssweight=2*8.368),
        contact_term(oa),
        # for membrane protein simulation use contact_term below.
        # contact_term(oa, z_dependent=True, inMembrane=True, membrane_center=membrane_center, k_relative_mem=3),
        beta_term_1(oa),
        beta_term_2(oa),
        beta_term_3(oa),
        pap_term_1(oa),
        pap_term_2(oa),
        # er_term(oa),
        qbias_term(oa,0, '1nfi-openmmawsem.pdb', 'A', k_qbias=1500*kilocalorie_per_mole, qbias_min_seq_sep=3, qbias_max_seq_sep=np.inf, qbias_contact_threshold=0.8*nanometers, forceGroup=4),
        # membrane_term(oa, k=1*kilocalorie_per_mole, membrane_center=membrane_center),
        # membrane_preassigned_term(oa, k=1*kilocalorie_per_mole, membrane_center=membrane_center, zimFile="PredictedZim"),
        # fragment_memory_term(oa, frag_file_list_file="./frags.mem", npy_frag_table="./frags.npy", UseSavedFragTable=True),
        fragment_memory_term(oa, max_seq_sep=12, frag_file_list_file="./single_frags.mem", npy_frag_table="./single_frags.npy", UseSavedFragFragTable=False),
        # debye_huckel_term(oa, chargeFile="charge.txt"),
    ]
    if computeQ:
        forces.append(rg_term(oa))
        forces.append(q_value(oa, "crystal_structure-cleaned.pdb", forceGroup=1))
        # forces.append(qc_value(oa, "crystal_structure-cleaned.pdb"))
        # forces.append(partial_q_value(oa, "crystal_structure-cleaned.pdb", residueIndexGroup=list(range(0, 15)), forceGroup=1))
    if submode == 0:
        additional_forces = [
            # contact_term(oa),
        ]
        forces += additional_forces
    return forces

